X<-as.matrix(cbind(data$TV,data$radio,data$newspaper))
Y<-as.matrix(data$sales)
multiple_linear_reg(X,Y,data)
View(data)
View(data)
View(data)
data<-read.csv('logistic.csv')
data
X<-as.matrix(cbind(rep(1,10),data$bank_balance,data$qualification))
Y<-as.matrix(data$default)
bal=readline("enter balance")
balance<-as.integer(bal)
qualification<-as.integer(qual)
Beta_all<-solve(t(X)%*%X)%*%t(X)%*%Y
Beta_all
#y=bo+b1x1+b2x2+b3x3
data$pred<-exp(-X%*%Beta_all)
Beta_all
y<-0.034523+balance*Beta_all[1]+qualification*Beta_all[2]
#p=1/1+e(-y)
p=1/1+exp(-y)
res<-log(p/1-p)
if(res>0)
{
print("Yes")
}else
{
print("No")
}
data<-read.csv('logistic.csv')
data
X<-as.matrix(cbind(rep(1,10),data$bank_balance,data$qualification))
X
Y<-as.matrix(data$default)
bal=readline("enter balance")
balance<-as.integer(bal)
qualification<-as.integer(qual)
Beta_all<-solve(t(X)%*%X)%*%t(X)%*%Y
Beta_all
#y=bo+b1x1+b2x2+b3x3
data$pred<-exp(-X%*%Beta_all)
Beta_all
y<-0.034523+balance*Beta_all[1]+qualification*Beta_all[2]
#p=1/1+e(-y)
p=1/1+exp(-y)
res<-log(p/1-p)
data<-read.csv('logistic.csv')
data<-read.csv('logistic.csv')
data
X<-as.matrix(cbind(c(1:10),data$bank_balance,data$qualification))
X
Y<-as.matrix(data$default)
bal=readline("enter balance")
qual=readline("enter qual")
balance<-as.integer(bal)
qualification<-as.integer(qual)
Beta_all<-solve(t(X)%*%X)%*%t(X)%*%Y
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x=strtoi(substr(digest(s,algo="md5"),1,8),16L)
tail(intToBits(x),16)
}
return(2^index(bits))
}
stream = sample(0:2^16,100,replace=TRUE)
count_distinct(stream)
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x=strtoi(substr(digest(s,algo="md5"),1,8),16L)
tail(intToBits(x),16)
}
#return(2^index(bits))
}
stream = sample(0:2^16,100,replace=TRUE)
count_distinct(stream)
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x=strtoi(substr(digest(s,algo="md5"),1,8),16L)
x
y<-tail(intToBits(x),16)
y
}
#return(2^index(bits))
}
stream = sample(0:2^16,100,replace=TRUE)
count_distinct(stream)
stream = sample(0:2^16,100,replace=TRUE)
count_distinct(stream)
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x=strtoi(substr(digest(s,algo="md5"),1,8),16L)
x
y<-tail(intToBits(x),16)
y
}
#return(2^index(bits))
}
stream = sample(0:2^16,100,replace=TRUE)
count_distinct(stream)
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),1,8),16L)
bits[index(tail(as.numeric(intToBits(x)),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,100,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),1,8),16L)
bits[index(tail(as.numeric(intToBits(x)),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,1000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),1,8),16L)
bits[index(tail(as.numeric(intToBits(x)),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(as.numeric(intToBits(x)),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(intToBits(x),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(intToBits(x),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,1000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(intToBits(x),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,1000)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(intToBits(x),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = as.integer(runif(10000, 0, 2^n))
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(intToBits(x),16))]<-1
}
return((1/0.7735)*2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(rev(as.numeric(intToBits(x)),16)))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(rev(as.numeric(intToBits(x)),16L)))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(rev(as.numeric(intToBits(x))),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
bits[index(tail(rev(as.numeric(intToBits(x))),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,1000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
x
bits[index(tail(as.numeric(intToBits(x)),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,1000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),0,7),16L)
x
bits[index(tail(as.numeric(intToBits(x)),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,1000,replace=TRUE)
ans<-count_distinct(stream)
ans
stream = sample(0:2^16,1000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),1,8),16L)
print(x)
bits[index(tail(as.numeric(intToBits(x)),16))]<-1
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,1000,replace=TRUE)
ans<-count_distinct(stream)
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),1,8),16L)
if(!is.na(x)){
bits[index(tail(as.numeric(intToBits(x)),16))]<-1
}
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,1000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),1,8),16L)
if(!is.na(x)){
bits[index(tail(as.numeric(intToBits(x)),16))]<-1
}
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),1,8),16L)
if(!is.na(x)){
bits[index(tail((intToBits(x)),16))]<-1
}
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
library(digest)
n<-16
count_distinct<-function(stream)
{
bits<-rep(0,n)
for(s in stream)
{
x<-strtoi(substr(digest(s,algo="md5"),1,8),16L)
if(!is.na(x)){
bits[index(tail((intToBits(x)),16))]<-1
}
}
return(2^index(bits))
}
index<-function(z)
{
return(min(which(z!=1)))
}
stream = sample(0:2^16,10000,replace=TRUE)
ans<-count_distinct(stream)
ans
